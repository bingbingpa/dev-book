- 스트림은 요소를 저장하지 않는다. 요소는 스트림을 지원하는 컬렉션에 저장하거나 필요할 때 생성한다.
- 스트림 연산은 원본을 변경하지 않는다. 
- 스트림 연산은 가능하면 지연(lazy)방식으로 작동한다. 즉, 필요하기 전까지는 연산 결과를 실행하지 않는다. 
- Collection 인터페이스의 stream 메서드를 사용하면 어떤 컬렉션이든 스트림으로 변환 할 수 있다. 하지만 배열일 때는 정적 메서드 Stream.of를 사용해야 한다. 
- 배열의 일부에서 스트림을 만들려면 Arrays.strea(array, from, to) 를 사용해야 한다.
- 요소가 없는 스트림을 만들려면 정적 메서드 Stream.empty를 사용한다. 
- filter 변환은 특정 조건과 일치하는 요소로 구성된 새 스트림을 돌려준다. 
- stream.limit(n) 호출은 요소 n개 이후(또는 원본 스트림이 n보다 짧다면 원본 스트림이 끝날 때) 끝나는 새 스트림을 반환한다. 
  Stream<Double> randoms = Stream.generate(Math::random).limit(100);
- stream.skip(n) 호출은 limit와는 반대 작업을 수행한다. 즉, 처음 n개 요소를 버린다. 
- stream.takeWhile(predicate) 호출은 프레디케이트가 참인 동안 스트림에서 모든 요소를 가져온 후 중단한다. 
- stream.dropWhile(predicate) 메서드는 반대로 조건이 참인 동안 요소를 버리고, 조건이 처음 거짓으로 판명된 요소부터 시작해 모든 요소의 스트림을 돌려준다. 
- distinct 메서드는 원본 스트림에 있는 요소의 중복을 제외하고 같은 순서로 돌려주는 스트림을 반환한다. 